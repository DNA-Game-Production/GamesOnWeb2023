{"version":3,"file":"connectionWS.js","names":["Animation","Axis","Vector3","chatRef","renderReact","Avatar","initFunction","scene","setScene","set_my_sphere","updateHour","getTime","isVector3Equal","makeid","askUsername","ErrorNoServer","ws","player_list","Map","night_monster_list","username","meshes","window","playerList","serverMessages","SET_USERNAME","LOGIN","LOGOUT","MESSAGE","POSITION","MONSTER_DATA","KILL_MONSTER","DAMAGE_MONSTER","FIRE_BULLET","HOUR","connect_to_ws","WebSocket","onerror","onopen","e","setUsername","send","JSON","stringify","route","content","setSocketMessageListener","addEventListener","event","messageReceived","parse","data","sphere","sender_name","set","setPositionUpdateSender","console","log","current","displayStatusInChat","avatar_to_disconnect","get","undefined","dispose","delete","messageContent","writeMessageInChat","time","message","avatar_update_from_serveur","monster_to_kill","firing_player","addBullet","player","sendPosition","setInterval","didSomething","oldPosition","position","clone","position_player","pos_x","x","pos_y","y","pos_z","z","health","currentHealth","maxHealth","direction","getDirection","Z","sendMessage","msg","message_player","objToPosition","list","avatar_to_update","CreateAndStartAnimation","ANIMATIONLOOPMODE_CONSTANT","target","add","lookAt","healthSet","establishConnection","name","username_entry","formatted_username_entry","replace","length","slice","then","collisionsEnabled"],"sources":["../../src/clients/connectionWS.ts"],"sourcesContent":["import { Animation, Axis, Mesh, Vector3 } from \"babylonjs\";\r\nimport { chatRef, renderReact } from \"..\";\r\nimport { Avatar } from \"./babylon/avatars/avatar\";\r\nimport { initFunction, scene, setScene, set_my_sphere } from \"./babylon/main\";\r\nimport { updateHour } from \"./babylon/time\";\r\nimport { getTime, isVector3Equal, makeid } from \"./babylon/tools\";\r\nimport { askUsername } from \"./reactComponents/login\";\r\nimport { ErrorNoServer } from \"./reactComponents/noServer\";\r\n\r\nexport var ws: WebSocket;\r\nexport var player_list: Map<string, Avatar> = new Map();\r\nexport var night_monster_list: Map<string, Avatar> = new Map();\r\nexport var username: string;\r\nexport var meshes: Mesh[] = [];\r\n\r\nwindow.playerList = player_list;\r\n\r\nexport const serverMessages = {\r\n    SET_USERNAME: \"usernameSetter\",\r\n    LOGIN: \"login\",\r\n    LOGOUT: \"logout\",\r\n    MESSAGE: \"message\",\r\n    POSITION: \"position\",\r\n    MONSTER_DATA: \"monster_data\",\r\n    KILL_MONSTER: \"kill_monster\",\r\n    DAMAGE_MONSTER: \"damage_monster\",\r\n    FIRE_BULLET: \"fireBullet\",\r\n    HOUR: \"hour\"\r\n}\r\n\r\ntype position = { pos_x: number, pos_y: number, pos_z: number, }\r\n\r\ntype receiveContent = {\r\n    pos_x: number, pos_y: number, pos_z: number,\r\n    username: string, direction: Vector3, health?: number, maxHealth?: number\r\n}\r\n\r\nexport function connect_to_ws() {\r\n\r\n    // !!!!!! CHANGE COMMENTED LINE TO CONNECT TO HEROKU BEFORE PUSHING A BUILD !!!!! \\\\\r\n    //first line is to connect on a local server for testing, second is to connect on the heroku server\r\n\r\n    //RUNNING SERVER ON LOCAL FOR DEV\r\n    // ws = new WebSocket(\"ws://127.0.0.1:8080\");\r\n\r\n    //RUNNING SERVER ON HEROKU FOR DEPLOYMENT\r\n    ws = new WebSocket(\"wss://mmoactiongameserver.herokuapp.com/\");\r\n\r\n    ws.onerror = () => {\r\n        ErrorNoServer()\r\n    };\r\n\r\n\r\n    //we start our request process when the connection is established\r\n    ws.onopen = (e) => {\r\n        //Ask username to user and removes \" and ' characters. If user fails to give a username, give them a random id\r\n        askUsername()\r\n    };\r\n\r\n    // setTimeout(() => {\r\n    //     setUsername();\r\n    //     setSocketMessageListener();\r\n    // },\r\n    //     100);\r\n\r\n}\r\n\r\n//login to the server with the given username\r\nfunction setUsername() {\r\n    ws.send(\r\n        JSON.stringify(\r\n            {\r\n                route: serverMessages.LOGIN,\r\n                content: username\r\n            }));\r\n}\r\n\r\n//our websocket listen to incoming messages\r\nfunction setSocketMessageListener() {\r\n    //procedure on messages received from server\r\n    ws.addEventListener('message', function (event) {\r\n        //console.log(event.data);\r\n        let messageReceived = JSON.parse(event.data);\r\n        switch (messageReceived.route) {\r\n\r\n            //login route: create avatar, link the new avatar with its user in the player_list, set my sphere if I'm the one who logged in\r\n            case serverMessages.LOGIN: {\r\n                var sphere = new Avatar(scene, messageReceived.content, username);\r\n                var sender_name = messageReceived.content;\r\n                player_list.set(sender_name, sphere);\r\n                if (sender_name === username) {\r\n                    set_my_sphere();\r\n                    setPositionUpdateSender()\r\n                }\r\n                console.log(\"LOGIN IN: \" + messageReceived.content);\r\n                chatRef.current!.displayStatusInChat(getTime(), messageReceived.content, true);\r\n                break;\r\n            }\r\n\r\n            case serverMessages.SET_USERNAME: {\r\n                console.log(\"USERNAME UPDATED FROM \" + username + \" TO \" + messageReceived.content);\r\n                username = messageReceived.content;\r\n                break;\r\n            }\r\n\r\n            //logout route: dispose player's avatar, remove player's entry in the player_list map\r\n            case serverMessages.LOGOUT: {\r\n                let avatar_to_disconnect = player_list.get(messageReceived.content);\r\n                if (avatar_to_disconnect !== undefined) avatar_to_disconnect.dispose();\r\n                player_list.delete(messageReceived.content);\r\n                console.log(\"LOGIN OUT: \" + messageReceived.content);\r\n                chatRef.current!.displayStatusInChat(getTime(), messageReceived.content, false);\r\n                break;\r\n            }\r\n\r\n            //message route: write the message content in the chat if the sender isn't us\r\n            case serverMessages.MESSAGE: {\r\n                let messageContent = JSON.parse(messageReceived.content);\r\n                if (messageContent.username === username) break;\r\n                chatRef.current!.writeMessageInChat(messageContent.time, messageContent.username, messageContent.message, false);\r\n                break;\r\n            }\r\n\r\n            //position: add the player if they aren't in our list yet, move the avatar to the input position\r\n            case serverMessages.POSITION: {\r\n                let messageContent: receiveContent = JSON.parse(messageReceived.content);\r\n                avatar_update_from_serveur(messageContent, player_list);\r\n                break;\r\n            }\r\n\r\n            //monster_data: update the monster's data\r\n            case serverMessages.MONSTER_DATA: {\r\n                let messageContent: receiveContent = JSON.parse(messageReceived.content);\r\n                avatar_update_from_serveur(messageContent, night_monster_list);\r\n                break;\r\n            }\r\n\r\n            //kill_monster: kill the monster with passed username\r\n            case serverMessages.KILL_MONSTER: {\r\n                let monster_to_kill = night_monster_list.get(messageReceived.content);\r\n                console.log(monster_to_kill, messageReceived.content, night_monster_list);\r\n\r\n                if (monster_to_kill !== undefined) monster_to_kill.dispose();\r\n                night_monster_list.delete(messageReceived.content);\r\n                break;\r\n            }\r\n\r\n            //route fireBullet: fireBullet with sender's avatar if the ender is not ourselves\r\n            case serverMessages.FIRE_BULLET: {\r\n                if (messageReceived.content !== username) {\r\n                    let firing_player = player_list.get(messageReceived.content)\r\n                    if (firing_player) {\r\n                        firing_player.addBullet(true);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            case serverMessages.HOUR: {\r\n                updateHour(messageReceived.content)\r\n                break;\r\n            }\r\n\r\n            //default: the route received does not exist. Should not happen, look for debugging!\r\n            default: console.log(\"received a message from server with an invalid route: \" + messageReceived.route);\r\n        }\r\n    })\r\n}\r\n\r\n//the client regularly send its player's position\r\nfunction setPositionUpdateSender() {\r\n    let player: Avatar | undefined;\r\n    if (username && (player = player_list.get(username))) sendPosition(player);\r\n    setInterval(() => {\r\n        let player: Avatar | undefined;\r\n        if (username && (player = player_list.get(username)) && (player.didSomething || !isVector3Equal(player.oldPosition, player.position))) {\r\n            sendPosition(player);\r\n            player.oldPosition = player.position.clone()\r\n        }\r\n    },\r\n        50);\r\n}\r\n\r\nfunction sendPosition(player: Avatar) {\r\n    player.didSomething = false;\r\n    var position_player = JSON.stringify({\r\n        pos_x: player.position.x,\r\n        pos_y: player.position.y,\r\n        pos_z: player.position.z,\r\n        username: username,\r\n        health: player.currentHealth,\r\n        maxHealth: player.maxHealth,\r\n        direction: player.getDirection(Axis.Z)\r\n    })\r\n\r\n    //console.log(\"sending \" + position_player);\r\n\r\n    ws.send(\r\n        JSON.stringify({\r\n            route: serverMessages.POSITION,\r\n            content: position_player\r\n        }))\r\n}\r\n\r\nexport function sendMessage(time: string, msg: string) {\r\n    var message_player = JSON.stringify({\r\n        username: username,\r\n        time: time,\r\n        message: msg\r\n    })\r\n\r\n    ws.send(\r\n        JSON.stringify({\r\n            route: serverMessages.MESSAGE,\r\n            content: message_player\r\n        }))\r\n}\r\n\r\nexport function objToPosition({ position }: Mesh): position {\r\n    return { pos_x: position.x, pos_y: position.y, pos_z: position.y }\r\n}\r\n\r\nfunction avatar_update_from_serveur(data: receiveContent, list: Map<String, Avatar>) {\r\n    //We parse the message's content to get something of the form:\r\n    //{pos_x: int, pos_y: int, pos_z: int, username: string}\r\n    if (data.username === username && list === player_list) return\r\n\r\n    //We find the avatar linked to the username in our list parameter map\r\n    let avatar_to_update = list.get(data.username);\r\n\r\n    //if we found nothing, we add the username in the list parameter map, and associate it with a new avatar\r\n    if (avatar_to_update === undefined) {\r\n        console.log(\"failed to find name \" + data.username + \" in list \" + list + \", adding him.\");\r\n        list.set(data.username, new Avatar(scene, data.username, username, {\r\n            health: {\r\n                maxHealth: data.maxHealth,\r\n                currentHealth: data.health\r\n            }\r\n        }));\r\n        avatar_to_update = list.get(data.username);\r\n    }\r\n\r\n    //avatar_to_move should now be affected and we can give it the new position\r\n    if (avatar_to_update) {\r\n        if (avatar_to_update.position.x !== data.pos_x || avatar_to_update.position.y !== data.pos_y || avatar_to_update.position.z !== data.pos_z) {\r\n            Animation.CreateAndStartAnimation(\"animMove\", avatar_to_update, \"position\", 60, 3, avatar_to_update.position, new Vector3(data.pos_x, data.pos_y, data.pos_z), Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n        }\r\n        //avatar_to_move.position = new Vector3(data.pos_x, data.pos_y, data.pos_z);\r\n        let target = avatar_to_update.position.add(data.direction);\r\n        avatar_to_update.lookAt(target);\r\n\r\n        //update the avatar health to the data received\r\n        let health = data.health\r\n        avatar_to_update.healthSet(health)\r\n\r\n    }\r\n    //for debugging, should NOT happen ever\r\n    else { console.log(\"WTF???????\") }\r\n}\r\n\r\nexport function establishConnection(name: string) {\r\n    var username_entry = name;\r\n    var formatted_username_entry = username_entry?.replace(/[\"']/g, \"\");\r\n    username = formatted_username_entry ? formatted_username_entry : \"\";\r\n\r\n    if (username.length > 12) {\r\n        username = username.slice(0, 12);\r\n    }\r\n\r\n    if (username === \"\") {\r\n        username = makeid(10);\r\n    }\r\n    console.log(\"connection successfully established!\");\r\n    setUsername();\r\n    setSocketMessageListener();\r\n    renderReact()\r\n    initFunction().then(e => {\r\n        setScene(e)\r\n        scene.collisionsEnabled = true\r\n    });\r\n}"],"mappings":"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"}