{"version":3,"file":"meshWithHealth.js","names":["Color3","DynamicTexture","Mesh","MeshBuilder","StandardMaterial","Vector3","scene","MeshWithHealth","constructor","name","healthParam","maxHealth","currentHealth","minHealth","healthBar","HealthBar","healthSet","healthSetToMax","healthAdd","n","healthMinus","healthKill","newHealth","Math","min","max","updateHealthBar","healthPercentage","colorHealthHigh","Green","colorHealthMedium","colorHealthLow","parent","p","height","width","healthBarContainerMaterial","emissiveColor","White","backFaceCulling","healthBarContainer","CreatePlane","position","material","billboardMode","BILLBOARDMODE_Y","healthBarMaterial","dynamicTexture","hasAlpha","undefined","scaling","x"],"sources":["../../../src/clients/babylon/meshWithHealth.ts"],"sourcesContent":["import { Color3, DynamicTexture, Mesh, MeshBuilder, Nullable, Scene, StandardMaterial, Vector3 } from \"babylonjs\";\r\nimport { scene } from \"./main\";\r\n\r\nexport type Health = {\r\n  maxHealth?: number;\r\n  minHealth?: number;\r\n  currentHealth?: number;\r\n}\r\n\r\nexport class MeshWithHealth extends Mesh implements Health {\r\n  maxHealth: number;\r\n  minHealth: number;\r\n  currentHealth: number;\r\n  healthBar: HealthBar;\r\n\r\n\r\n  constructor(name: string, scene?: Nullable<Scene> | undefined, healthParam?: Health) {\r\n    super(name, scene);\r\n    this.maxHealth = (healthParam?.maxHealth || healthParam?.currentHealth) || 100\r\n    this.minHealth = healthParam?.minHealth || 0\r\n    this.healthBar = new HealthBar(this);\r\n    this.currentHealth = this.healthSet(healthParam?.currentHealth || this.maxHealth)\r\n  }\r\n\r\n  healthSetToMax() {\r\n    this.healthSet(this.maxHealth);\r\n  }\r\n\r\n  healthAdd(n: number) {\r\n    this.healthSet(this.currentHealth + n)\r\n  }\r\n\r\n  healthMinus(n: number) {\r\n    this.healthSet(this.currentHealth - n)\r\n  }\r\n\r\n  healthKill() {\r\n    this.healthSet(this.minHealth)\r\n  }\r\n\r\n  healthSet(newHealth: number | undefined) {\r\n    this.currentHealth = Math.min(this.maxHealth, Math.max(this.minHealth, newHealth || this.currentHealth))\r\n    this.healthBar.updateHealthBar(this.healthPercentage())\r\n    return this.currentHealth;\r\n  }\r\n\r\n  healthPercentage() {\r\n    return this.currentHealth / this.maxHealth;\r\n  }\r\n}\r\n\r\nclass HealthBar {\r\n\r\n  static colorHealthHigh = Color3.Green()\r\n  static colorHealthMedium = new Color3(0.5, 0.5, 0)\r\n  static colorHealthLow = new Color3(1, 0, 0)\r\n  healthBar: Mesh | undefined;\r\n  healthBarMaterial: StandardMaterial | undefined;\r\n  height: number;\r\n  width: number;\r\n\r\n  constructor(parent: Mesh, p?: { height: number, width: number }) {\r\n    this.height = p?.height || 0.15;\r\n    this.width = p?.width || 1;\r\n    let [width, height] = [this.width, this.height]\r\n    // the healthBarContainer\r\n    var healthBarContainerMaterial = new StandardMaterial(parent.name + \"hb2mat\", scene);\r\n    healthBarContainerMaterial.emissiveColor = Color3.White();\r\n    healthBarContainerMaterial.backFaceCulling = false;\r\n\r\n    var healthBarContainer = MeshBuilder.CreatePlane(parent.name + \"hb2\", { width, height }, scene);\r\n    healthBarContainer.position = new Vector3(0, 1.2, 0);     // Position above player.\r\n    healthBarContainer.parent = parent;\r\n    healthBarContainer.material = healthBarContainerMaterial;\r\n    healthBarContainer.billboardMode = Mesh.BILLBOARDMODE_Y\r\n\r\n    // The healthBar\r\n    var healthBar = MeshBuilder.CreatePlane(parent.name + \"hb1\", { width, height }, scene);\r\n    healthBar.position = new Vector3(0, 0, -.01);\r\n    var healthBarMaterial = new StandardMaterial(parent.name + \"hb1mat\", scene);\r\n    healthBarMaterial.backFaceCulling = false;\r\n    healthBarMaterial.emissiveColor = HealthBar.colorHealthHigh;\r\n    var dynamicTexture = new DynamicTexture(parent.name + \"dt1\", 512, scene, true);\r\n    dynamicTexture.hasAlpha = true;\r\n    healthBar.parent = healthBarContainer;\r\n    healthBar.material = healthBarMaterial;\r\n\r\n    this.healthBar = healthBar;\r\n    this.healthBarMaterial = healthBarMaterial\r\n  }\r\n\r\n  updateHealthBar(healthPercentage: number) {\r\n    if (this.healthBar === undefined) return\r\n    this.healthBar.scaling.x = healthPercentage;\r\n    this.healthBar.position.x = -(this.width * (1 - healthPercentage) / 2);\r\n\r\n    if (healthPercentage > 2 / 3) {\r\n      this.healthBarMaterial!.emissiveColor = HealthBar.colorHealthHigh;\r\n    } else if (healthPercentage < 2 / 3 && healthPercentage > 1 / 3) {\r\n      this.healthBarMaterial!.emissiveColor = HealthBar.colorHealthMedium\r\n    } else {\r\n      this.healthBarMaterial!.emissiveColor = HealthBar.colorHealthLow\r\n    }\r\n\r\n  }\r\n}"],"mappings":"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"}